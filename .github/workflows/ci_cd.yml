name: CI

on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MAIN_PYTHON_VERSION: '3.11'
  DOCUMENTATION_CNAME: 'examples.workbench.docs.pyansys.com'
  VTK_OSMESA_VERSION: '9.2.20230527.dev0'

jobs:

  labeler:
    name: "Labels"
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    if: |
      github.event.type != 'labeled'
    steps:
     - uses: actions/checkout@v4

     - name: "Update labels"
       uses: micnncim/action-label-syncer@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

     - name: "Label pull-request"
       uses: actions/labeler@v5.0.0
       with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}

  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/code-style@v8
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-python-cache: false

  doc-style:
    name: "Documentation Style Check"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/doc-style@v8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-build:
    name: "Build documentation"
    runs-on: [self-hosted, pyworkbench]
    needs: [doc-style]
    steps:
        
      - name: "Checkout project"
        uses: actions/checkout@v4
        with:
          path: pyworkbench-examples

      - name: "Checkout examples data"
        uses: actions/checkout@v4
        with:
          repository: ansys/example-data
          path: data

      - name: "Copy additional data into PyWorkbench"
        run: |
          Copy-Item -Path "data\pyworkbench\*" -Destination "pyworkbench-examples\examples" -Recurse -Force
          Get-ChildItem -Path "pyworkbench-examples\examples" -Recurse
      
      - name: "Install Python ${{ env.MAIN_PYTHON_VERSION }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: "Install requirements"
        working-directory: pyworkbench-examples
        run: |
          python -m venv .venv
          .venv\Scripts\Activate.ps1
          python -m pip install -r requirements/requirements_examples.txt
          python -m pip install -r requirements/requirements_doc.txt

      - name: "Configure graphic dependencies"
        working-directory: pyworkbench-examples
        run: |
          .venv\Scripts\Activate.ps1
          python -m pip uninstall --yes vtk
          python -m pip install --extra-index-url https://wheels.vtk.org vtk-osmesa==${{ env.VTK_OSMESA_VERSION }}

      - name: "Build HTML documentation"
        working-directory: pyworkbench-examples
        run: |
          .venv\Scripts\Activate.ps1
          python -m sphinx doc/source "doc/_build/html" --color -vW -b html

      - name: "Upload HTML artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: documentation-html
          path: pyworkbench-examples/doc/_build/html

      - name: "Clean tasks"
        if: ${{ always() }}
        run: |
          $processNames = @("ANSYS", "ANSYS241", "AnsysWBU", "AnsysFWW", "RunWB2")
          $foundAnyProcess = $false
          
          foreach ($processName in $processNames) {
              $process = Get-Process -Name $processName -ErrorAction SilentlyContinue
          
              if ($process) {
                  $process | Stop-Process -Force
                  $foundAnyProcess = $true
              } else {
                  Write-Output "No process named '$processName' was found."
              }
          }
          
          if (-not $foundAnyProcess) {
              Write-Output "No specified processes were found."
          }


      - name: "Remove temporary folders"
        if: ${{ always() }}
        run: |
          Get-ChildItem -Path "C:\Users\ansys\AppData\Local\Temp" -Directory -Filter "act_tmp*" | Remove-Item -Recurse -Force
          Get-ChildItem -Path "C:\Users\ansys\AppData\Local\Temp" -Directory -Filter "WB_ansys*" | Remove-Item -Recurse -Force

  doc-deploy-dev:
    name: "Deploy development documentation"
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: doc-build
    steps:
      - uses: ansys/actions/doc-deploy-dev@v8
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-deploy-stable:
    name: "Deploy stable docs"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: doc-build
    steps:
      - name: Deploy the stable documentation
        uses: ansys/actions/doc-deploy-stable@v8
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}


  doc-index-stable:
    name: "Deploy stable docs index"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: doc-deploy-stable
    steps:
      - name: "Install Git and clone project"
        uses: actions/checkout@v4

      - name: "get version of library"
        shell: bash
        run: |
          echo "FULL_VERSION=$(cat VERSION)" >> $GITHUB_ENV

      - name: Scrape the stable documentation to PyMeilisearch
        run: |
          VERSION=$(python -c "import os; version=os.environ['FULL_VERSION']; print('.'.join(version.split('.')[:2]))")
          VERSION_MEILI=$(python -c "import os; version=os.environ['FULL_VERSION']; print('-'.join(version.split('.')[:2]))")
          echo "Calculated VERSION: $VERSION"
          echo "Calculated VERSION_MEILI: $VERSION_MEILI"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION_MEILI=$VERSION_MEILI" >> $GITHUB_ENV

      - name: "Deploy the latest documentation index"
        uses: ansys/actions/doc-deploy-index@main
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}/version/${{ env.VERSION }}
          index-name: pyworkbench-examples-v${{ env.VERSION_MEILI }}
          host-url: ${{ vars.MEILISEARCH_HOST_URL }}
          api-key: ${{ env.MEILISEARCH_API_KEY }}
