[
    {
        "objectID": "advanced-examples",
        "href": "advanced-examples.html#advanced-examples",
        "title": "Advanced examples",
        "section": "Advanced examples",
        "text": "A collection of examples showcasing complex workflows generated with PyWorkbench\nand other PyAnsys libraries."
    },
    {
        "objectID": "examples/ansys-fluent-workflow/main",
        "href": "examples/ansys-fluent-workflow/main.html#ansys-fluent-workflow",
        "title": "Ansys Fluent workflow",
        "section": "Ansys Fluent workflow",
        "text": "In this example, the application of PyWorkbench, a Python client scripting tool for Ansys Workbench, is demonstrated in a use case for Ansys Fluent Workflow. The Ansys Fluent TUI (Text User Interface) journal files are utilized to set up and solve the simulation. For meshing Ansys Fluent Meshing WTM (Water Tight Meshing Workflow)is employed through recorded journaling capabilites of Ansys Fluent. As aware, Workbench offers the ability to record actions performed in the user interface, also known\nas journaling. These recorded actions are saved as Python scripts, which allow for extending functionality, automating repetitive analyses, and running analyses in batch mode. This example demonstrates how to use such a journal file with PyWorkbench for Ansys Fluent Workflow.\nThis example sets up and solves a three-dimensional turbulent fluid flow and heat transfer problem in a mixing elbow, which is common in piping systems in power plants and process industries. Predicting the flow field and temperature field in the area of the mixing region is important to designing the junction properly."
    },
    {
        "objectID": "examples/ansys-fluent-workflow/main",
        "href": "examples/ansys-fluent-workflow/main.html#problem-description",
        "title": "Ansys Fluent workflow > Problem description",
        "section": "Problem description",
        "text": "A cold fluid at 20 deg C flows into the pipe through a large inlet. It then mixes with a warmer fluid at 40 deg C that enters through a smaller inlet located at the elbow. The pipe dimensions are in inches, and the fluid properties and boundary conditions are given in SI units. Because the Reynolds number for the flow at the larger inlet is 50,800, a turbulent flow model is required."
    },
    {
        "objectID": "examples/ansys-fluent-workflow/main",
        "href": "examples/ansys-fluent-workflow/main.html#what-this-tutorial-covers",
        "title": "Ansys Fluent workflow > What this tutorial covers",
        "section": "What this tutorial covers",
        "text": "This use case that demonstrates following PyWorkbench API capabilities such as: - Initiating the Ansys Workbench server locally and establishing a connection with a local client. - Uploading the required input data from client working directory to server working directory. - Executing the Ansys Workbench journal (.wbjn) script on the server, which will execute the Fluent simulation using setup.jou and solve.jou TUI scripts. refer assets for simulation input data. - Downloading the results from\nthe server to client. - Shutting down the server.\nPerforming essential imports for Ansys Workbench, pathlib to handle filesystems path.\nUpload several input files (Geometry, Ansys Fluent simulation setup and solve journal files ), which will be transferred to the host.\nThis will configure the workbench project schematic. This file is Ansys Workbench recorded journal file (Python Script). This can be easily configured as per requirement. >Note: For a better understanding of how meshing, setup, and solve workflows are being utilized, please refer to the project.wbjn file.\nHere, only the contour saved during the simulation data post-processing is being downloaded. But one can download all the output as required.\n[1]:\nimport pathlib\nfrom ansys.workbench.core import launch_workbench\n[2]:\nworkdir = pathlib.Path(\"__file__\").parent\n\nserver_workdir = workdir / 'server_workdir'\nserver_workdir.mkdir(exist_ok=True)\n\nassets = workdir / \"assets\"\nscdoc = assets /\"scdoc\"\njou = assets / \"jou\"\n[3]:\nwb = launch_workbench(server_workdir=str(server_workdir.absolute()), client_workdir=str(workdir.absolute()))\n[4]:\nwb.upload_file(str(scdoc / \"mixing_elbow.scdoc\"))\nwb.upload_file(str(jou / \"setup.jou\"))\nwb.upload_file(str(jou / \"solve.jou\"))\n[5]:\nsys_name = wb.run_script_file(str((assets / \"project.wbjn\").absolute()))\n[6]:\nwb.download_file(\"temperature_contour.jpeg\")\n[7]:\nwb.exit()\n[ ]:\n"
    },
    {
        "objectID": "examples/ansys-fluent-workflow/main",
        "href": "examples/ansys-fluent-workflow/main.html#performed-required-imports",
        "title": "Ansys Fluent workflow > Performed required imports",
        "section": "Performed required imports",
        "text": "Performing essential imports for Ansys Workbench, pathlib to handle filesystems path.\n[1]:\nimport pathlib\nfrom ansys.workbench.core import launch_workbench"
    },
    {
        "objectID": "examples/ansys-fluent-workflow/main",
        "href": "examples/ansys-fluent-workflow/main.html#setting-up-server-working-directory-and-asset-paths",
        "title": "Ansys Fluent workflow > Setting up server Working directory and asset paths",
        "section": "Setting up server Working directory and asset paths",
        "text": "[2]:\nworkdir = pathlib.Path(\"__file__\").parent\n\nserver_workdir = workdir / 'server_workdir'\nserver_workdir.mkdir(exist_ok=True)\n\nassets = workdir / \"assets\"\nscdoc = assets /\"scdoc\"\njou = assets / \"jou\""
    },
    {
        "objectID": "examples/ansys-fluent-workflow/main",
        "href": "examples/ansys-fluent-workflow/main.html#launch-the-workbench-session-with-specified-server-and-client-working-directories",
        "title": "Ansys Fluent workflow > Launch the workbench session with specified server and client working directories",
        "section": "Launch the workbench session with specified server and client working directories",
        "text": "[3]:\nwb = launch_workbench(server_workdir=str(server_workdir.absolute()), client_workdir=str(workdir.absolute()))"
    },
    {
        "objectID": "examples/ansys-fluent-workflow/main",
        "href": "examples/ansys-fluent-workflow/main.html#uploading-the-input-data",
        "title": "Ansys Fluent workflow > Uploading the input data",
        "section": "Uploading the input data",
        "text": "Upload several input files (Geometry, Ansys Fluent simulation setup and solve journal files ), which will be transferred to the host.\n[4]:\nwb.upload_file(str(scdoc / \"mixing_elbow.scdoc\"))\nwb.upload_file(str(jou / \"setup.jou\"))\nwb.upload_file(str(jou / \"solve.jou\"))"
    },
    {
        "objectID": "examples/ansys-fluent-workflow/main",
        "href": "examples/ansys-fluent-workflow/main.html#executing-a-workbench-script",
        "title": "Ansys Fluent workflow > Executing a workbench script",
        "section": "Executing a workbench script",
        "text": "This will configure the workbench project schematic. This file is Ansys Workbench recorded journal file (Python Script). This can be easily configured as per requirement. >Note: For a better understanding of how meshing, setup, and solve workflows are being utilized, please refer to the project.wbjn file.\n[5]:\nsys_name = wb.run_script_file(str((assets / \"project.wbjn\").absolute()))"
    },
    {
        "objectID": "examples/ansys-fluent-workflow/main",
        "href": "examples/ansys-fluent-workflow/main.html#downloading-output-files-to-the-client-side-working-directory",
        "title": "Ansys Fluent workflow > Downloading output files to the client-side working directory",
        "section": "Downloading output files to the client-side working directory",
        "text": "Here, only the contour saved during the simulation data post-processing is being downloaded. But one can download all the output as required.\n[6]:\nwb.download_file(\"temperature_contour.jpeg\")"
    },
    {
        "objectID": "examples/ansys-fluent-workflow/main",
        "href": "examples/ansys-fluent-workflow/main.html#shutdown-the-ansys-workbench-server-session",
        "title": "Ansys Fluent workflow > Shutdown the Ansys Workbench server session",
        "section": "Shutdown the Ansys Workbench server session",
        "text": "[7]:\nwb.exit()\n[ ]:\n"
    },
    {
        "objectID": "examples/material-designer-workflow/main",
        "href": "examples/material-designer-workflow/main.html#material-designer",
        "title": "Material Designer",
        "section": "Material Designer",
        "text": "This notebook demonstrates the process of sending user-defined parameter values to a parameterized analysis and receive the corresponding simulation output via a Workbench service on a local machine.\nLaunch the Workbench service on the local machine, using some options. Define several directories that will be used during the session. workdir is set to the parent directory of the current file. assets, scripts, and wbpz are subdirectories within the working directory. The launch_workbench function is called to start a Workbench session with specified directory.\nUpload the project files to the server using the upload_file_from_example_repo method. The file to upload is MatDesigner.wbpz.\nExecute a Workbench script (project.wbjn) to define the project and load the geometry using the run_script_file method. The set_log_file method is used to direct the logs to wb_log_file.log.\nPrepare the Workbench command template to make modifications to the material property, in this case the Young’s modulus of the material\nUpdate the project with a new value for the Young’s modulus\nExtract output values. First, we prepare the Workbench script to quiry output parameter values\nGet updated output values\nFinally, call the exit method on the Workbench client to gracefully shut down the service.\n[1]:\nimport os\nimport pathlib\n[2]:\nfrom ansys.workbench.core import launch_workbench\n[3]:\nworkdir = pathlib.Path(\"__file__\").parent\n[4]:\nassets = workdir / \"assets\"\n[5]:\nwb = launch_workbench(client_workdir=str(workdir.absolute()))\n[6]:\nwb.upload_file_from_example_repo('material-designer-workflow/wbpz/MatDesigner.wbpz')\n[7]:\nexport_path = 'wb_log_file.log'\nwb.set_log_file(export_path)\nsys_name = wb.run_script_file(str((assets / \"project.wbjn\").absolute()), log_level='info')\n[8]:\nwbjn_template = \"\"\"designPoint1 = Parameters.GetDesignPoint(Name=\"0\")\nparameter1 = Parameters.GetParameter(Name=\"P1\")\ndesignPoint1.SetParameterExpression(\n    Parameter=parameter1,\n    Expression=\"{} [Pa]\")\nbackgroundSession1 = UpdateAllDesignPoints(DesignPoints=[designPoint1])\n\"\"\"\n[9]:\nmy_command = wbjn_template.format( 1.6e10 )\nwb.run_script_string( my_command )\n[10]:\nextract_output = '''import json\np = Parameters.GetParameter(Name=\"P{}\")\nmy_tag = p.DisplayText\nwb_script_result =json.dumps( my_tag + ',' + str(p.Value) )\n'''\n[11]:\noutputs = {}\nfor p in range( 2 , 12 ):\n    return_val = wb.run_script_string( extract_output.format( p ) ).split(',')\n    name = return_val[0]\n    parameter_val = float(return_val[1])\n    outputs[ name ] = parameter_val\nprint( outputs )\n[12]:\nwb.exit()"
    },
    {
        "objectID": "basic-examples",
        "href": "basic-examples.html#basic-examples",
        "title": "Basic examples",
        "section": "Basic examples",
        "text": "A collection of examples for learning the fundamentals of the PyWorkbench\nlibrary."
    },
    {
        "objectID": "examples/cyclic-symmetry-analysis/main",
        "href": "examples/cyclic-symmetry-analysis/main.html#cyclic-symmetry-analysis",
        "title": "Cyclic symmetry analysis",
        "section": "Cyclic symmetry analysis",
        "text": "This notebook demonstrates how to use the Workbench client to manage projects on a remote host, run scripts, and handle output files. It covers launching services, uploading files, executing scripts, and visualizing results using PyMechanical.\nLaunch the Workbench service on a remote host machine, specifying the remote host machine name and user login credentials. Define several directories that will be used during the session. workdir is set to the parent directory of the current file. assets, scripts, and cdb are subdirectories within the working directory. The launch_workbench function is called to start a Workbench session with specified directory.\nUpload the project files to the server using the upload_file_from_example_repo method. The file to upload is sector_model.cdb.\nExecute a Workbench script (project.wbjn) to define the project and load the geometry using the run_script_file method. The set_log_file method is used to direct the logs to wb_log_file.log. The name of the system created is stored in sys_name and printed.\nStart a PyMechanical server for the system using the start_mechanical_server method. Create a PyMechanical client session connected to this server using launch_mechanical. The project directory is printed to verify the connection.\nRead and execute the script cyclic_symmetry_analysis.py via the PyMechanical client using run_python_script. This script typically contains commands to mesh and solve the model. The output of the script is printed.\nSpecify the Mechanical directory and run a script to fetch the working directory path. The path where all solver files are stored on the server is printed. Download the solver output file (solve.out) from the server to the client’s current working directory and print its contents.\nSpecify the Mechanical directory path for images and run a script to fetch the directory path. The path where images are stored on the server is printed. Download an image file (deformation.png) from the server to the client’s current working directory and display it using matplotlib.\nDownload all the files from the server to the current working directory. Verify the source path for the directory and copy all files from the server to the client.\nFinally, the exit method is called on both the PyMechanical and Workbench clients to gracefully shut down the services, ensuring that all resources are properly released.\n[1]:\nimport os\nimport pathlib\n[2]:\nfrom ansys.workbench.core import launch_workbench\nfrom ansys.mechanical.core import launch_mechanical\n[3]:\nworkdir = pathlib.Path(\"__file__\").parent\n[4]:\nassets = workdir / \"assets\"\nscripts = workdir / \"scripts\"\n[5]:\nwb = launch_workbench(client_workdir=str(workdir.absolute()))\n[6]:\nwb.upload_file_from_example_repo(\"cyclic-symmetry-analysis/cdb/sector_model.cdb\")\n[7]:\nexport_path = 'wb_log_file.log'\nwb.set_log_file(export_path)\nsys_name = wb.run_script_file(str((assets / \"project.wbjn\").absolute()), log_level='info')\nprint(sys_name)\n[8]:\nserver_port = wb.start_mechanical_server(system_name=sys_name)\nmechanical = launch_mechanical(start_instance=False, ip='localhost', port=server_port)\n[9]:\nprint(mechanical.project_directory)\n[10]:\nwith open(scripts / \"cyclic_symmetry_analysis.py\") as sf:\n    mech_script = sf.read()\nmech_output = mechanical.run_python_script(mech_script)\nprint(mech_output)\n[11]:\nmechanical.run_python_script(f\"solve_dir=ExtAPI.DataModel.AnalysisList[5].WorkingDir\")\nresult_solve_dir_server = mechanical.run_python_script(f\"solve_dir\")\nprint(f\"All solver files are stored on the server at: {result_solve_dir_server}\")\n[12]:\nsolve_out_path = os.path.join(result_solve_dir_server, \"solve.out\")\n[13]:\ndef write_file_contents_to_console(path):\n    \"\"\"Write file contents to console.\"\"\"\n    with open(path, \"rt\") as file:\n        for line in file:\n            print(line, end=\"\")\n[14]:\ncurrent_working_directory = os.getcwd()\nmechanical.download(solve_out_path, target_dir=current_working_directory)\nsolve_out_local_path = os.path.join(current_working_directory, \"solve.out\")\nwrite_file_contents_to_console(solve_out_local_path)\nos.remove(solve_out_local_path)\n[15]:\nfrom matplotlib import image as mpimg\nfrom matplotlib import pyplot as plt\n[16]:\nmechanical.run_python_script(f\"image_dir=ExtAPI.DataModel.AnalysisList[5].WorkingDir\")\nresult_image_dir_server = mechanical.run_python_script(f\"image_dir\")\nprint(f\"Images are stored on the server at: {result_image_dir_server}\")\n[17]:\ndef get_image_path(image_name):\n    return os.path.join(result_image_dir_server, image_name)\n[18]:\ndef display_image(path):\n    print(f\"Printing {path} using matplotlib\")\n    image1 = mpimg.imread(path)\n    plt.figure(figsize=(15, 15))\n    plt.axis(\"off\")\n    plt.imshow(image1)\n    plt.show()\n[19]:\nimage_name = \"deformation.png\"\nimage_path_server = get_image_path(image_name)\n[20]:\nif image_path_server != \"\":\n    current_working_directory = os.getcwd()\n\n    local_file_path_list = mechanical.download(\n        image_path_server, target_dir=current_working_directory\n    )\n    image_local_path = local_file_path_list[0]\n    print(f\"Local image path : {image_local_path}\")\n\n    display_image(image_local_path)\n[21]:\nmechanical.run_python_script(f\"solve_dir=ExtAPI.DataModel.AnalysisList[5].WorkingDir\")\nresult_solve_dir_server = mechanical.run_python_script(f\"solve_dir\")\nprint(f\"All solver files are stored on the server at: {result_solve_dir_server}\")\n[22]:\nsolve_out_path = os.path.join(result_solve_dir_server, \"*.*\")\n[23]:\ncurrent_working_directory = os.getcwd()\nmechanical.download(solve_out_path, target_dir=current_working_directory)\n[24]:\nmechanical.exit()\nwb.exit()"
    },
    {
        "objectID": "examples/pymechanical-integration/main",
        "href": "examples/pymechanical-integration/main.html#pymechanical-integration",
        "title": "PyMechanical integration",
        "section": "PyMechanical integration",
        "text": "This example demonstrates how to use PyWorkbench and PyMechanical together to upload geometry, run simulations, and visualize results. It covers launching services, running scripts, and handling files between the client and server.\nFirst, import the necessary modules. We import pathlib for handling filesystem paths, os for interacting with the operating system, and pyvista for visualization. The launch_workbench function from ansys.workbench.core is imported to start a Workbench session, and launch_mechanical from ansys.mechanical.core to start a Mechanical session.\nDefine several directories that will be used during the session. workdir is set to the parent directory of the current file. assets, scripts, and agdb are subdirectories within the working directory. The launch_workbench function is called to start a Workbench session with specified directories.\nUpload a geometry file (two_pipes.agdb) from the example database to the server using the upload_file_from_example_repo method.\nExecute a Workbench script (project.wbjn) to create a mechanical system and load the geometry using the run_script_file method. The name of the system created is stored in system_name.\nStart a PyMechanical service for the specified system using the start_mechanical_server method. Create a PyMechanical client connected to this service using launch_mechanical. The project directory is printed to verify the connection.\nRead and execute the script solve.py via the PyMechanical client using run_python_script. This script typically contains commands to mesh and solve the model. The output of the script is printed.\nFetch output files (*solve.out and *deformation.png) from the solver directory to the client’s working directory using the download method.\nRead and print the content of the solver output file (solve.out) to the console.\nPlot the deformation result (deformation.png) using pyvista. A Plotter object is created, and the image is added as a background. The plot is then displayed.\nFinally, the exit method is called on both the PyMechanical and Workbench clients to gracefully shut down the services, ensuring that all resources are properly released.\n[1]:\nimport os\nimport pathlib\nimport pyvista as pv\nfrom ansys.workbench.core import launch_workbench\nfrom ansys.mechanical.core import launch_mechanical\n[2]:\nworkdir = pathlib.Path(\"__file__\").parent\nassets = workdir / \"assets\"\nscripts = workdir / \"scripts\"\nagdb = workdir / \"agdb\"\nwb = launch_workbench(client_workdir=str(workdir.absolute()))\n[3]:\nwb.upload_file_from_example_repo(\"pymechanical-integration/agdb/two_pipes.agdb\")\n[4]:\nsystem_name = wb.run_script_file(str((assets / \"project.wbjn\").absolute()))\n[5]:\npymech_port = wb.start_mechanical_server(system_name=system_name)\nmechanical = launch_mechanical(start_instance=False, ip='localhost', port=pymech_port)\nprint(mechanical.project_directory)\n[6]:\nwith open(scripts / \"solve.py\") as sf:\n    mech_script = sf.read()\nprint(mechanical.run_python_script(mech_script))\n[7]:\nmechanical.download(\"*solve.out\", target_dir=wb.client_workdir)\nmechanical.download(\"*deformation.png\", target_dir=wb.client_workdir)\n[8]:\nwith open(os.path.join(wb.client_workdir, \"solve.out\"), \"r\") as f:\n    print(f.read())\n[9]:\npl = pv.Plotter()\npl.add_background_image(os.path.join(wb.client_workdir, \"deformation.png\"))\npl.show()\n[10]:\nmechanical.exit()\nwb.exit()"
    },
    {
        "objectID": "index",
        "href": "index.html#pyworkbench-examples-050",
        "title": "PyWorkbench Examples 0.5.0",
        "section": "PyWorkbench Examples 0.5.0",
        "text": "The following examples are available to help you get started with PyWorkbench.\nDifferent showcases are provided to guide you step by step through the process\nof interfacing with other Ansys products thanks to Workbench.\nBasic examples to get you started with PyWorkbench.\nAdvanced examples to help you understand the full capabilities of\nPyWorkbench."
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#integrating-pyfluent-with-pyworkbench",
        "title": "Integrating PyFluent with PyWorkbench:",
        "section": "Integrating PyFluent with PyWorkbench:",
        "text": "This example showcases how to use PyFluent workflow together with PyWorkbench - (Python client scripting for Ansys Workbench).\nThis example sets up and solves a three-dimensional turbulent fluid flow and heat transfer problem in a mixing elbow, which is common in piping systems in power plants and process industries. Predicting the flow field and temperature field in the area of the mixing region is important to designing the junction properly.\nThis example uses Pyfluent settings objects API’s.\nA cold fluid at 20 deg C flows into the pipe through a large inlet. It then mixes with a warmer fluid at 40 deg C that enters through a smaller inlet located at the elbow. The pipe dimensions are in inches, and the fluid properties and boundary conditions are given in SI units. Because the Reynolds number for the flow at the larger inlet is 50,800, a turbulent flow model is required.\nPerforming essential imports for Ansys Workbench, Fluent Pythonic Interface and for downloading examples data.\nLaunch Fluent as server with PyWorkbench API and and connect to Pyfluent session\nSet the working units for the mesh to inches. Because the default SI units are used for everything except length, you do not have to change any other units in this example. If you want working units for length to be other than inches (for example, millimeters), make the appropriate change.\nEnable heat transfer by activating the energy equation.\nCreate a material named \"water-liquid\".\nSet up the cell zone conditions for the fluid zone (elbow-fluid). Set material to \"water-liquid\".\nSet up the boundary conditions for the inlets, outlet, and walls for CFD analysis. - cold inlet (cold-inlet), Setting: Value: - Velocity Specification Method: Magnitude, Normal to Boundary - Velocity Magnitude: 0.4 [m/s] - Specification Method: Intensity and Hydraulic Diameter - Turbulent Intensity: 5 [%] - Hydraulic Diameter: 4 [inch] - Temperature: 293.15 [K]\nhot inlet (hot-inlet), Setting: Value:\nVelocity Specification Method: Magnitude, Normal to Boundary\nVelocity Magnitude: 1.2 [m/s]\nSpecification Method: Intensity and Hydraulic Diameter\nTurbulent Intensity: 5 [%]\nHydraulic Diameter: 1 [inch]\nTemperature: 313.15 [K]\npressure outlet (outlet), Setting: Value:\nBackflow Turbulent Intensity: 5 [%]\nBackflow Turbulent Viscosity Ratio: 4\nSetting iteration count to 150 to solve the model.\nCreate and display velocity vectors on the symmetry-xyplane plane.\nSince Fluent is being run without the GUI, you must to export plots as picture files. Edit the picture settings to use a custom resolution so that the images are large enough.\nCreate and display velocity vectors on the symmetry-xyplane plane. Then, export the image for inspection.\nCompute the mass flow rate.\n[1]:\nimport os\nimport pathlib\nfrom ansys.workbench.core import launch_workbench\nimport ansys.fluent.core as pyfluent\nfrom ansys.fluent.core import examples\n[2]:\nworkdir = pathlib.Path(\"__file__\").parent\n[3]:\nwb = launch_workbench(client_workdir=str(workdir.absolute()))\n[4]:\nimport_filename = examples.download_file(\"mixing_elbow.msh.h5\", \"pyfluent/mixing_elbow\")\nwb.upload_file(import_filename)\n[5]:\nexport_path = \"wb_log_file.log\"\nwb.set_log_file(export_path)\nwb.run_script_string('template1 = GetTemplate(TemplateName=\"FLUENT\")', log_level=\"info\")\nwb.run_script_string(\"system1 = template1.CreateSystem()\")\n[6]:\nserver_info_file = wb.start_fluent_server(system_name=\"FLU\")\nfluent_session = pyfluent.connect_to_fluent(server_info_file_name=server_info_file)\n[7]:\n# Import the mesh and perform a mesh check, which lists the minimum and maximum\n# x, y, and z values from the mesh in the default SI units of meters. The mesh\n# check also reports a number of other mesh features that are checked. Any errors\n# in the mesh are reported. Ensure that the minimum volume is not negative because\n# Fluent cannot begin a calculation when this is the case.\n\nfluent_session.file.read_mesh(file_name=import_filename)\nfluent_session.mesh.check()\n[8]:\nfluent_session.tui.define.units(\"length\", \"in\")\n[9]:\nfluent_session.setup.models.energy.enabled = True\n[10]:\nfluent_session.setup.materials.database.copy_by_name(type=\"fluid\", name=\"water-liquid\")\n[11]:\nfluent_session.setup.cell_zone_conditions.fluid['elbow-fluid'].general.material = \"water-liquid\"\n[12]:\ncold_inlet = fluent_session.setup.boundary_conditions.velocity_inlet[\"cold-inlet\"]\ncold_inlet.get_state()\ncold_inlet.momentum.velocity.value = 0.4\ncold_inlet.turbulence.turbulent_specification = \"Intensity and Hydraulic Diameter\"\ncold_inlet.turbulence.turbulent_intensity = 0.05\ncold_inlet.turbulence.hydraulic_diameter = \"4 [in]\"\ncold_inlet.thermal.t.value = 293.15\n[13]:\nhot_inlet = fluent_session.setup.boundary_conditions.velocity_inlet[\"hot-inlet\"]\nhot_inlet.momentum.velocity.value = 1.2\nhot_inlet.turbulence.turbulent_specification = \"Intensity and Hydraulic Diameter\"\nhot_inlet.turbulence.turbulent_intensity = 0.05\nhot_inlet.turbulence.hydraulic_diameter = \"1 [in]\"\nhot_inlet.thermal.t.value = 313.15\n[14]:\nfluent_session.setup.boundary_conditions.pressure_outlet[\n    \"outlet\"\n].turbulence.backflow_turbulent_viscosity_ratio = 4\n[15]:\nfluent_session.solution.initialization.hybrid_initialize()\n[16]:\nfluent_session.solution.run_calculation.iter_count = 100\n[17]:\nscript_string = \"\"\"\nsolutionComponent1 = system1.GetComponent(Name=\"Solution\")\nsystem1 = GetSystem(Name=\"FLU\")\nsolutionComponent1 = system1.GetComponent(Name=\"Solution\")\nsolutionComponent1.Update(AllDependencies=True)\n\"\"\"\n[18]:\nwb.run_script_string(script_string)\n[19]:\ngraphics = fluent_session.results.graphics\nif graphics.picture.use_window_resolution.is_active():\n    graphics.picture.use_window_resolution = False\ngraphics.picture.x_resolution = 1920\ngraphics.picture.y_resolution = 1440\n[20]:\ngraphics = fluent_session.results.graphics\n[21]:\ngraphics.vector[\"velocity_vector_symmetry\"] = {}\nvelocity_symmetry = fluent_session.results.graphics.vector[\"velocity_vector_symmetry\"]\nvelocity_symmetry.print_state()\nvelocity_symmetry.field = \"velocity-magnitude\"\nvelocity_symmetry.surfaces_list = [\n    \"symmetry-xyplane\",\n]\nvelocity_symmetry.scale.scale_f = 4\nvelocity_symmetry.style = \"arrow\"\nvelocity_symmetry.display()\n[22]:\ngraphics.views.restore_view(view_name=\"front\")\ngraphics.views.auto_scale()\ngraphics.picture.save_picture(file_name=\"velocity_vector_symmetry.png\")\n[23]:\nfluent_session.solution.report_definitions.flux[\"mass_flow_rate\"] = {}\n\nmass_flow_rate = fluent_session.solution.report_definitions.flux[\"mass_flow_rate\"]\nmass_flow_rate.boundaries = [\n    \"cold-inlet\",\n    \"hot-inlet\",\n    \"outlet\",\n]\nmass_flow_rate.print_state()\nfluent_session.solution.report_definitions.compute(report_defs=[\"mass_flow_rate\"])\n[24]:\nfluent_session.exit()\n[25]:\nsave_string = \"\"\"import os\nworkdir = GetServerWorkingDirectory()\npath = os.path.join(workdir, \"mixing_elbow.wbpj\")\nSave(FilePath=path , Overwrite=True)\"\"\"\nwb.run_script_string(save_string)\n[26]:\narchive_string =\"\"\"import os\nworkdir = GetServerWorkingDirectory()\npath = os.path.join(workdir, \"mixing_elbow.wbpz\")\nArchive(FilePath=path , IncludeExternalImportedFiles=True)\"\"\"\nwb.run_script_string(archive_string)\n[27]:\nwb.download_file(\"mixing_elbow.wbpz\")\n[28]:\nwb.exit()"
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#problem-description",
        "title": "Integrating PyFluent with PyWorkbench: > Problem description",
        "section": "Problem description",
        "text": "A cold fluid at 20 deg C flows into the pipe through a large inlet. It then mixes with a warmer fluid at 40 deg C that enters through a smaller inlet located at the elbow. The pipe dimensions are in inches, and the fluid properties and boundary conditions are given in SI units. Because the Reynolds number for the flow at the larger inlet is 50,800, a turbulent flow model is required."
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#performed-required-imports",
        "title": "Integrating PyFluent with PyWorkbench: > Performed required imports",
        "section": "Performed required imports",
        "text": "Performing essential imports for Ansys Workbench, Fluent Pythonic Interface and for downloading examples data.\n[1]:\nimport os\nimport pathlib\nfrom ansys.workbench.core import launch_workbench\nimport ansys.fluent.core as pyfluent\nfrom ansys.fluent.core import examples"
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#specify-client-and-server-directories-with-launch-wb-service",
        "title": "Integrating PyFluent with PyWorkbench: > Specify client and server directories with launch WB service.",
        "section": "Specify client and server directories with launch WB service.",
        "text": "[2]:\nworkdir = pathlib.Path(\"__file__\").parent\n[3]:\nwb = launch_workbench(client_workdir=str(workdir.absolute()))"
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#download-the-input-file-from-example-data-and-upload-to-server-directory",
        "title": "Integrating PyFluent with PyWorkbench: > Download the input file from example data and upload to server directory.",
        "section": "Download the input file from example data and upload to server directory.",
        "text": "[4]:\nimport_filename = examples.download_file(\"mixing_elbow.msh.h5\", \"pyfluent/mixing_elbow\")\nwb.upload_file(import_filename)"
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#generate-a-fluent-system-using-ansys-workbench-scripting-api-used-for-journaling-and-parse-it-to-the-pyworkbench-api",
        "title": "Integrating PyFluent with PyWorkbench: > Generate a “FLUENT” System using Ansys Workbench Scripting API (used for Journaling) and parse it to the PyWorkbench API.",
        "section": "Generate a “FLUENT” System using Ansys Workbench Scripting API (used for Journaling) and parse it to the PyWorkbench API.",
        "text": "[5]:\nexport_path = \"wb_log_file.log\"\nwb.set_log_file(export_path)\nwb.run_script_string('template1 = GetTemplate(TemplateName=\"FLUENT\")', log_level=\"info\")\nwb.run_script_string(\"system1 = template1.CreateSystem()\")"
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#launch-fluent--connect-to-fluent",
        "title": "Integrating PyFluent with PyWorkbench: > Launch Fluent & Connect to Fluent",
        "section": "Launch Fluent & Connect to Fluent",
        "text": "Launch Fluent as server with PyWorkbench API and and connect to Pyfluent session\n[6]:\nserver_info_file = wb.start_fluent_server(system_name=\"FLU\")\nfluent_session = pyfluent.connect_to_fluent(server_info_file_name=server_info_file)"
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#import-mesh-and-perform-mesh-check",
        "title": "Integrating PyFluent with PyWorkbench: > Import mesh and perform mesh check",
        "section": "Import mesh and perform mesh check",
        "text": "[7]:\n# Import the mesh and perform a mesh check, which lists the minimum and maximum\n# x, y, and z values from the mesh in the default SI units of meters. The mesh\n# check also reports a number of other mesh features that are checked. Any errors\n# in the mesh are reported. Ensure that the minimum volume is not negative because\n# Fluent cannot begin a calculation when this is the case.\n\nfluent_session.file.read_mesh(file_name=import_filename)\nfluent_session.mesh.check()"
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#set-working-units-for-mesh",
        "title": "Integrating PyFluent with PyWorkbench: > Set working units for mesh",
        "section": "Set working units for mesh",
        "text": "Set the working units for the mesh to inches. Because the default SI units are used for everything except length, you do not have to change any other units in this example. If you want working units for length to be other than inches (for example, millimeters), make the appropriate change.\n[8]:\nfluent_session.tui.define.units(\"length\", \"in\")"
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#enable-heat-transfer",
        "title": "Integrating PyFluent with PyWorkbench: > Enable heat transfer",
        "section": "Enable heat transfer",
        "text": "Enable heat transfer by activating the energy equation.\n[9]:\nfluent_session.setup.models.energy.enabled = True"
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#create-material",
        "title": "Integrating PyFluent with PyWorkbench: > Create material",
        "section": "Create material",
        "text": "Create a material named \"water-liquid\".\n[10]:\nfluent_session.setup.materials.database.copy_by_name(type=\"fluid\", name=\"water-liquid\")"
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#set-up-cell-zone-conditions",
        "title": "Integrating PyFluent with PyWorkbench: > Set up cell zone conditions",
        "section": "Set up cell zone conditions",
        "text": "Set up the cell zone conditions for the fluid zone (elbow-fluid). Set material to \"water-liquid\".\n[11]:\nfluent_session.setup.cell_zone_conditions.fluid['elbow-fluid'].general.material = \"water-liquid\""
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#set-up-boundary-conditions-for-cfd-analysis",
        "title": "Integrating PyFluent with PyWorkbench: > Set up boundary conditions for CFD analysis",
        "section": "Set up boundary conditions for CFD analysis",
        "text": "Set up the boundary conditions for the inlets, outlet, and walls for CFD analysis. - cold inlet (cold-inlet), Setting: Value: - Velocity Specification Method: Magnitude, Normal to Boundary - Velocity Magnitude: 0.4 [m/s] - Specification Method: Intensity and Hydraulic Diameter - Turbulent Intensity: 5 [%] - Hydraulic Diameter: 4 [inch] - Temperature: 293.15 [K]\nhot inlet (hot-inlet), Setting: Value:\nVelocity Specification Method: Magnitude, Normal to Boundary\nVelocity Magnitude: 1.2 [m/s]\nSpecification Method: Intensity and Hydraulic Diameter\nTurbulent Intensity: 5 [%]\nHydraulic Diameter: 1 [inch]\nTemperature: 313.15 [K]\npressure outlet (outlet), Setting: Value:\nBackflow Turbulent Intensity: 5 [%]\nBackflow Turbulent Viscosity Ratio: 4\n[12]:\ncold_inlet = fluent_session.setup.boundary_conditions.velocity_inlet[\"cold-inlet\"]\ncold_inlet.get_state()\ncold_inlet.momentum.velocity.value = 0.4\ncold_inlet.turbulence.turbulent_specification = \"Intensity and Hydraulic Diameter\"\ncold_inlet.turbulence.turbulent_intensity = 0.05\ncold_inlet.turbulence.hydraulic_diameter = \"4 [in]\"\ncold_inlet.thermal.t.value = 293.15\n[13]:\nhot_inlet = fluent_session.setup.boundary_conditions.velocity_inlet[\"hot-inlet\"]\nhot_inlet.momentum.velocity.value = 1.2\nhot_inlet.turbulence.turbulent_specification = \"Intensity and Hydraulic Diameter\"\nhot_inlet.turbulence.turbulent_intensity = 0.05\nhot_inlet.turbulence.hydraulic_diameter = \"1 [in]\"\nhot_inlet.thermal.t.value = 313.15\n[14]:\nfluent_session.setup.boundary_conditions.pressure_outlet[\n    \"outlet\"\n].turbulence.backflow_turbulent_viscosity_ratio = 4"
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#initialize-flow-field",
        "title": "Integrating PyFluent with PyWorkbench: > Initialize flow field",
        "section": "Initialize flow field",
        "text": "[15]:\nfluent_session.solution.initialization.hybrid_initialize()"
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#solve-for-150-iterations",
        "title": "Integrating PyFluent with PyWorkbench: > Solve for 150 iterations",
        "section": "Solve for 150 iterations",
        "text": "Setting iteration count to 150 to solve the model.\n[16]:\nfluent_session.solution.run_calculation.iter_count = 100"
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#update-solution-using-workbench-journal-commands",
        "title": "Integrating PyFluent with PyWorkbench: > Update Solution using Workbench Journal Commands",
        "section": "Update Solution using Workbench Journal Commands",
        "text": "[17]:\nscript_string = \"\"\"\nsolutionComponent1 = system1.GetComponent(Name=\"Solution\")\nsystem1 = GetSystem(Name=\"FLU\")\nsolutionComponent1 = system1.GetComponent(Name=\"Solution\")\nsolutionComponent1.Update(AllDependencies=True)\n\"\"\"\n[18]:\nwb.run_script_string(script_string)"
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#postprocessing",
        "title": "Integrating PyFluent with PyWorkbench: > Postprocessing",
        "section": "Postprocessing",
        "text": "Create and display velocity vectors on the symmetry-xyplane plane."
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#configure-graphics-picture-export",
        "title": "Integrating PyFluent with PyWorkbench: > Configure graphics picture export",
        "section": "Configure graphics picture export",
        "text": "Since Fluent is being run without the GUI, you must to export plots as picture files. Edit the picture settings to use a custom resolution so that the images are large enough.\n[19]:\ngraphics = fluent_session.results.graphics\nif graphics.picture.use_window_resolution.is_active():\n    graphics.picture.use_window_resolution = False\ngraphics.picture.x_resolution = 1920\ngraphics.picture.y_resolution = 1440"
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#create-velocity-vectors",
        "title": "Integrating PyFluent with PyWorkbench: > Create velocity vectors",
        "section": "Create velocity vectors",
        "text": "Create and display velocity vectors on the symmetry-xyplane plane. Then, export the image for inspection.\n[20]:\ngraphics = fluent_session.results.graphics\n[21]:\ngraphics.vector[\"velocity_vector_symmetry\"] = {}\nvelocity_symmetry = fluent_session.results.graphics.vector[\"velocity_vector_symmetry\"]\nvelocity_symmetry.print_state()\nvelocity_symmetry.field = \"velocity-magnitude\"\nvelocity_symmetry.surfaces_list = [\n    \"symmetry-xyplane\",\n]\nvelocity_symmetry.scale.scale_f = 4\nvelocity_symmetry.style = \"arrow\"\nvelocity_symmetry.display()\n[22]:\ngraphics.views.restore_view(view_name=\"front\")\ngraphics.views.auto_scale()\ngraphics.picture.save_picture(file_name=\"velocity_vector_symmetry.png\")"
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#compute-mass-flow-rate",
        "title": "Integrating PyFluent with PyWorkbench: > Compute mass flow rate",
        "section": "Compute mass flow rate",
        "text": "Compute the mass flow rate.\n[23]:\nfluent_session.solution.report_definitions.flux[\"mass_flow_rate\"] = {}\n\nmass_flow_rate = fluent_session.solution.report_definitions.flux[\"mass_flow_rate\"]\nmass_flow_rate.boundaries = [\n    \"cold-inlet\",\n    \"hot-inlet\",\n    \"outlet\",\n]\nmass_flow_rate.print_state()\nfluent_session.solution.report_definitions.compute(report_defs=[\"mass_flow_rate\"])"
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#exit-fluent-session",
        "title": "Integrating PyFluent with PyWorkbench: > Exit Fluent Session",
        "section": "Exit Fluent Session",
        "text": "[24]:\nfluent_session.exit()"
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#save-project",
        "title": "Integrating PyFluent with PyWorkbench: > Save project",
        "section": "Save project",
        "text": "[25]:\nsave_string = \"\"\"import os\nworkdir = GetServerWorkingDirectory()\npath = os.path.join(workdir, \"mixing_elbow.wbpj\")\nSave(FilePath=path , Overwrite=True)\"\"\"\nwb.run_script_string(save_string)"
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#archive-project",
        "title": "Integrating PyFluent with PyWorkbench: > Archive Project",
        "section": "Archive Project",
        "text": "[26]:\narchive_string =\"\"\"import os\nworkdir = GetServerWorkingDirectory()\npath = os.path.join(workdir, \"mixing_elbow.wbpz\")\nArchive(FilePath=path , IncludeExternalImportedFiles=True)\"\"\"\nwb.run_script_string(archive_string)"
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#download-the-archived-project-which-has-all-simulation-data-and-results",
        "title": "Integrating PyFluent with PyWorkbench: > Download the archived project which has all simulation data and results.",
        "section": "Download the archived project which has all simulation data and results.",
        "text": "[27]:\nwb.download_file(\"mixing_elbow.wbpz\")"
    },
    {
        "objectID": "examples/pyfluent-workflow/main",
        "href": "examples/pyfluent-workflow/main.html#exit-workbench-session",
        "title": "Integrating PyFluent with PyWorkbench: > Exit Workbench Session.",
        "section": "Exit Workbench Session.",
        "text": "[28]:\nwb.exit()"
    },
    {
        "objectID": "examples/cooled-turbine-blade/main",
        "href": "examples/cooled-turbine-blade/main.html#cooled-turbine-blade",
        "title": "Cooled turbine blade",
        "section": "Cooled turbine blade",
        "text": "This notebook demonstrates the process of using the Workbench client to upload project files, run scripts, start services, and handle output files. It also includes launching PyMechanical to solve models and visualize results.\nFirst, import the necessary modules. We import pathlib for handling filesystem paths and os for interacting with the operating system. The launch_workbench function from ansys.workbench.core is imported to start a Workbench session, and launch_mechanical from ansys.mechanical.core to start a Mechanical session.\nLaunch the Workbench service on the local machine, using some options. Define several directories that will be used during the session. workdir is set to the parent directory of the current file. assets, scripts, and wbpz are subdirectories within the working directory. The launch_workbench function is called to start a Workbench session with specified directory.\nUpload the project files to the server using the upload_file_from_example_repo method. The file to upload is cooled_turbine_blade.wbpz.\nExecute a Workbench script (project.wbjn) to define the project and load the geometry using the run_script_file method. The set_log_file method is used to direct the logs to wb_log_file.log. The name of the system created is stored in sys_name and printed.\nStart a PyMechanical server for the system using the start_mechanical_server method. Create a PyMechanical client session connected to this server using launch_mechanical. The project directory is printed to verify the connection.\nRead and execute the script cooled_turbine_blade.py via the PyMechanical client using run_python_script. This script typically contains commands to mesh and solve the turbine blade model. The output of the script is printed.\nSpecify the Mechanical directory and run a script to fetch the working directory path. The path where all solver files are stored on the server is printed. Download the solver output file (solve.out) from the server to the client’s current working directory and print its contents.\nSpecify the Mechanical directory path for images and run a script to fetch the directory path. The path where images are stored on the server is printed. Download an image file (stress.png) from the server to the client’s current working directory and display it using matplotlib.\nDownload all the files from the server to the current working directory. Verify the target and source paths and copy all files from the server to the client.\nFinally, the exit method is called on both the PyMechanical and Workbench clients to gracefully shut down the services, ensuring that all resources are properly released.\n[1]:\nimport os\nimport pathlib\n[2]:\nfrom ansys.workbench.core import launch_workbench\nfrom ansys.mechanical.core import launch_mechanical\n[3]:\nworkdir = pathlib.Path(\"__file__\").parent\n[4]:\nassets = workdir / \"assets\"\nscripts = workdir / \"scripts\"\n[5]:\nwb = launch_workbench(client_workdir=str(workdir.absolute()))\n[6]:\nwb.upload_file_from_example_repo(\"cooled-turbine-blade/wbpz/cooled_turbine_blade.wbpz\")\n[7]:\nexport_path = 'wb_log_file.log'\nwb.set_log_file(export_path)\nsys_name = wb.run_script_file(str((assets / \"project.wbjn\").absolute()), log_level='info')\nprint(sys_name)\n[8]:\nserver_port = wb.start_mechanical_server(system_name=sys_name)\nmechanical = launch_mechanical(start_instance=False, ip='localhost', port=server_port)\n[9]:\nprint(mechanical.project_directory)\n[10]:\nwith open(scripts / \"cooled_turbine_blade.py\") as sf:\n    mech_script = sf.read()\nmech_output = mechanical.run_python_script(mech_script)\nprint(mech_output)\n[11]:\nmechanical.run_python_script(f\"solve_dir=ExtAPI.DataModel.AnalysisList[1].WorkingDir\")\n[12]:\nresult_solve_dir_server = mechanical.run_python_script(f\"solve_dir\")\nprint(f\"All solver files are stored on the server at: {result_solve_dir_server}\")\n[13]:\nsolve_out_path = os.path.join(result_solve_dir_server, \"solve.out\")\n[14]:\ndef write_file_contents_to_console(path):\n    \"\"\"Write file contents to console.\"\"\"\n    with open(path, \"rt\") as file:\n        for line in file:\n            print(line, end=\"\")\n[15]:\ncurrent_working_directory = os.getcwd()\nmechanical.download(solve_out_path, target_dir=current_working_directory)\nsolve_out_local_path = os.path.join(current_working_directory, \"solve.out\")\nwrite_file_contents_to_console(solve_out_local_path)\nos.remove(solve_out_local_path)\n[16]:\nfrom matplotlib import image as mpimg\nfrom matplotlib import pyplot as plt\n[17]:\nmechanical.run_python_script(f\"image_dir=ExtAPI.DataModel.AnalysisList[1].WorkingDir\")\n[18]:\nresult_image_dir_server = mechanical.run_python_script(f\"image_dir\")\nprint(f\"Images are stored on the server at: {result_image_dir_server}\")\n[19]:\ndef get_image_path(image_name):\n    return os.path.join(result_image_dir_server, image_name)\n[20]:\ndef display_image(path):\n    print(f\"Printing {path} using matplotlib\")\n    image1 = mpimg.imread(path)\n    plt.figure(figsize=(15, 15))\n    plt.axis(\"off\")\n    plt.imshow(image1)\n    plt.show()\n[21]:\nimage_name = \"stress.png\"\nimage_path_server = get_image_path(image_name)\n[22]:\nif image_path_server != \"\":\n    current_working_directory = os.getcwd()\n\n    local_file_path_list = mechanical.download(\n        image_path_server, target_dir=current_working_directory\n    )\n    image_local_path = local_file_path_list[0]\n    print(f\"Local image path : {image_local_path}\")\n\n    display_image(image_local_path)\n[23]:\nimport shutil\nimport glob\n[24]:\ncurrent_working_directory = os.getcwd()\ntarget_dir2 = current_working_directory\nprint(f\"Files to be copied from server path at: {target_dir2}\")\n[25]:\nprint(f\"All the solver file is stored on the server at: {result_solve_dir_server}\")\n[26]:\nsource_dir = result_solve_dir_server\ndestination_dir = target_dir2\n[27]:\nfor file in glob.glob(source_dir + '/*'):\n    shutil.copy(file, destination_dir)\n[28]:\nmechanical.exit()\nwb.exit()"
    },
    {
        "objectID": "examples/logging/main",
        "href": "examples/logging/main.html#logging",
        "title": "Logging",
        "section": "Logging",
        "text": "This example showcases the logging capabilities of PyWorkbench.\nFirst, import the necessary modules. We import pathlib for handling filesystem paths and os for interacting with the operating system. The launch_workbench function from ansys.workbench.core is imported to start a Workbench session.\nNext, launch a Workbench session using PyWorkbench. Different directories are declared, including the client and server working directories, which should NOT be the same.\nHere, we define several directories that will be used during the session. workdir is set to the directory containing the current file. server_workdir, client_workdir, and alternative_target_dir are subdirectories within the working directory.\nLaunch Workbench using previous directories:\nThe launch_workbench function is called to start a Workbench session. server_workdir and client_workdir are set to their absolute paths to avoid any ambiguity in directory locations.\nThis command demonstrates how to download files from the server using a wildcard. The download_file method is used to fetch all files matching the pattern server1.* from the server to the client.\nThis command downloads the entire contents of the server directory to an alternative local directory specified by alternative_target_dir.\nThis command shows how to upload files to the server using wildcards. All .txt files and files matching the pattern model?.prt in the client directory are uploaded to the server.\nHere, files are uploaded from an alternative directory, and non-existing files are specified. The show_progress parameter is set to False to disable the progress bar during the upload.\nThis segment sets up a log file for the script execution. The set_log_file method directs the logs to wb_log_file.log, and run_script_file executes a script with info log level. The output of the script is printed to the console.\nTo change the logging configuration, we first disable the log file using reset_log_file. The console log level is then set to info using set_console_log_level. The script is run again with the same log level, and the output is printed.\nIn this step, the console log level is set to error, making the logging more restrictive. The script is executed again, and only error-level logs are shown.\n[1]:\nimport pathlib\nimport os\nfrom ansys.workbench.core import launch_workbench\n[2]:\nworkdir = pathlib.Path(\"__file__\").parent\nserver_workdir = workdir / \"server_workdir\"\nclient_workdir = workdir / \"client_workdir\"\nalternative_target_dir = workdir / \"alternative_target_dir\"\n[3]:\nwb = launch_workbench(server_workdir=str(server_workdir.absolute()), client_workdir=str(client_workdir.absolute()))\n[4]:\ndownloaded1 = wb.download_file('server1.*')\n[5]:\ndownloaded2 = wb.download_file('*', target_dir=alternative_target_dir)\n[6]:\nwb.upload_file('*.txt', 'model?.prt')\n[7]:\nwb.upload_file(os.path.join(alternative_target_dir, 'app.py'), 'non_existing_file1', 'non_existing_file2', show_progress=False)\n[8]:\nexport_path = 'wb_log_file.log'\nwb.set_log_file(export_path)\nprint(wb.run_script_file('wb.wbjn', log_level='info'))\n[9]:\nwb.reset_log_file()\nwb.set_console_log_level('info')\nprint(wb.run_script_file('wb.wbjn', log_level='info'))\n[10]:\nwb.set_console_log_level('error')\nprint(wb.run_script_file('wb.wbjn', log_level='info'))\n[11]:\nwb.exit()"
    },
    {
        "objectID": "examples/ansys-aedt-workflow/main",
        "href": "examples/ansys-aedt-workflow/main.html#transient-electro-thermal-simulation-of-transient-voltage-suppression-tvs-diodes",
        "title": "Transient Electro-Thermal Simulation of Transient Voltage Suppression (TVS) Diodes",
        "section": "Transient Electro-Thermal Simulation of Transient Voltage Suppression (TVS) Diodes",
        "text": "This notebook demonstrates the process of running a Workbench service with Electronic Desktop on a local machine to solve highly non-linear Diode response subjected to high thermal load and mechanical stresses. It includes steps for uploading project files, executing scripts.\nLaunch the Workbench service on the local machine using specific options. Define the working directory and subdirectories for assets, scripts, and geometry databases (agdb). The launch_workbench function starts a Workbench session with the specified directories.\nUpload the project files to the server using the upload_file method. The files uploaded are TVR14471_V_short.wbpz, 10_1000_Pulse_short.csv\nNote: use 10_1000_Pulse.csv for fullscale simulation\nExecute a Workbench script (project.wbjn) to define the project and load the geometry using the run_script_file method. The set_log_file method is used to direct the logs to wb_log_file.log.\nNote: For full-scale simulation use TVR14471_V.wbpz in line 7 of project.wbjn\nStart a Mechanical and AEDT client sessions to solve the Transient Electro-Thermal Simulation. Both MECHANICAL and AEDT sessions will be started\nNote: Disable the Distribution of the solution in Ansys Mechanical. For Full scale simulation use 10_1000_Pulse.csv in line 232 of DC_Cond_ThermTransient_VariableTimeStep.py\nShutdown the Ansys Workbench server session\n[1]:\nimport pathlib\nimport os\nfrom ansys.workbench.core import launch_workbench\n[2]:\nworkdir = pathlib.Path(\"__file__\").parent\n[3]:\nassets = workdir / \"assets\"\nscripts = workdir / \"scripts\"\n[4]:\nwb = launch_workbench(client_workdir=str(workdir.absolute()))\n[5]:\nwb.upload_file_from_example_repo(\"ansys-aedt-workflow/wbpz/TVR14471_V_short.wbpz\")\nwb.upload_file(str(assets / \"10_1000_Pulse_short.csv\"))\n[6]:\nexport_path = 'wb_log_file.log'\nwb.set_log_file(export_path)\nwb.run_script_file(str((assets / \"project.wbjn\").absolute()), log_level='info')\n[7]:\nwb.run_script_file(str((scripts / \"DC_Cond_ThermTransient_VariableTimeStep.py\").absolute()), log_level='info')\n[8]:\nwb.exit()\n[ ]:\n"
    },
    {
        "objectID": "examples/axisymmetric-rotor/main",
        "href": "examples/axisymmetric-rotor/main.html#axisymmetric-rotor",
        "title": "Axisymmetric rotor",
        "section": "Axisymmetric rotor",
        "text": "This notebook demonstrates the process of running a Workbench service on a local machine to solve both 2D general axisymmetric rotor and 3D rotor models using PyMechanical. It includes steps for uploading project files, executing scripts, downloading results, and displaying output images.\nLaunch the Workbench service on the local machine using specific options. Define the working directory and subdirectories for assets, scripts, and geometry databases (agdb). The launch_workbench function starts a Workbench session with the specified directory.\nUpload the project files to the server using the upload_file_from_example_repo method. The files uploaded are axisymmetric_model.agdb, rotor_3d_model.agdb.\nExecute a Workbench script (project.wbjn) to define the project and load the geometry. The log file is set to wb_log_file.log and the name of the system created is stored in sys_name and printed.\nStart a PyMechanical server for the system and create a PyMechanical client session to solve the 2D general axisymmetric rotor model. The project directory is printed to verify the connection.\nRead and execute the script axisymmetric_rotor.py via the PyMechanical client to mesh and solve the 2D general axisymmetric rotor model. The output of the script is printed.\nSpecify the Mechanical directory for the Modal Campbell Analysis and fetch the working directory path. Download the solver output file (solve.out) from the server to the client’s current working directory and print its contents.\nSpecify the Mechanical directory path for the Modal Campbell Analysis and fetch the image directory path. Download an image file (tot_deform_2D.png) from the server to the client’s current working directory and display it using matplotlib.\nSpecify the Mechanical directory for the Unbalance Response Analysis and fetch the working directory path. Download the solver output file (solve.out) from the server to the client’s current working directory and print its contents.\nStart a PyMechanical server for the 3D rotor model system and create a PyMechanical client session. The project directory is printed to verify the connection.\nRead and execute the script rotor_3d.py via the PyMechanical client to mesh and solve the 3D rotor model. The output of the script is printed.\nSpecify the Mechanical directory for the Modal Campbell Analysis and fetch the working directory path. Download the solver output file (solve.out) from the server to the client’s current working directory and print its contents.\nSpecify the Mechanical directory path for the Modal Campbell Analysis and fetch the image directory path. Download an image file (tot_deform_3D.png) from the server to the client’s current working directory and display it using matplotlib.\nSpecify the Mechanical directory for the Unbalance Response Analysis and fetch the working directory path. Download the solver output file (solve.out) from the server to the client’s current working directory and print its contents.\nDownload all the files from the server to the current working directory for the 3D rotor model. Verify the source path for the directory and copy all files from the server to the client.\nFinally, call the exit method on both the PyMechanical and Workbench clients to gracefully shut down the services.\n[1]:\nimport os\nimport pathlib\n[2]:\nfrom ansys.workbench.core import launch_workbench\nfrom ansys.mechanical.core import launch_mechanical\n[3]:\nworkdir = pathlib.Path(\"__file__\").parent\n[4]:\nassets = workdir / \"assets\"\nscripts = workdir / \"scripts\"\n[5]:\nwb = launch_workbench(client_workdir=str(workdir.absolute()))\n[6]:\nwb.upload_file_from_example_repo(\"axisymmetric-rotor/agdb/axisymmetric_model.agdb\")\nwb.upload_file_from_example_repo(\"axisymmetric-rotor/agdb/rotor_3d_model.agdb\")\n[7]:\nexport_path = 'wb_log_file.log'\nwb.set_log_file(export_path)\nsys_name = wb.run_script_file(str((assets / \"project.wbjn\").absolute()), log_level='info')\nprint(sys_name)\n[8]:\nserver_port = wb.start_mechanical_server(system_name=sys_name[1])\nmechanical = launch_mechanical(start_instance=False, ip='localhost', port=server_port)\n[9]:\nprint(mechanical.project_directory)\n[10]:\nwith open(scripts / \"axisymmetric_rotor.py\") as sf:\n    mech_script = sf.read()\nmech_output = mechanical.run_python_script(mech_script)\nprint(mech_output)\n[11]:\nmechanical.run_python_script(f\"solve_dir=ExtAPI.DataModel.AnalysisList[2].WorkingDir\")\nresult_solve_dir_server = mechanical.run_python_script(f\"solve_dir\")\nprint(f\"All solver files are stored on the server at: {result_solve_dir_server}\")\n[12]:\nsolve_out_path = os.path.join(result_solve_dir_server, \"solve.out\")\n[13]:\ndef write_file_contents_to_console(path):\n    \"\"\"Write file contents to console.\"\"\"\n    with open(path, \"rt\") as file:\n        for line in file:\n            print(line, end=\"\")\n[14]:\ncurrent_working_directory = os.getcwd()\nmechanical.download(solve_out_path, target_dir=current_working_directory)\nsolve_out_local_path = os.path.join(current_working_directory, \"solve.out\")\nwrite_file_contents_to_console(solve_out_local_path)\nos.remove(solve_out_local_path)\n[15]:\nfrom matplotlib import image as mpimg\nfrom matplotlib import pyplot as plt\n[16]:\nmechanical.run_python_script(f\"image_dir=ExtAPI.DataModel.AnalysisList[2].WorkingDir\")\nresult_image_dir_server = mechanical.run_python_script(f\"image_dir\")\nprint(f\"Images are stored on the server at: {result_image_dir_server}\")\n[17]:\ndef get_image_path(image_name):\n    return os.path.join(result_image_dir_server, image_name)\n[18]:\ndef display_image(path):\n    print(f\"Printing {path} using matplotlib\")\n    image1 = mpimg.imread(path)\n    plt.figure(figsize=(15, 15))\n    plt.axis(\"off\")\n    plt.imshow(image1)\n    plt.show()\n[19]:\nimage_name = \"tot_deform_2D.png\"\nimage_path_server = get_image_path(image_name)\n[20]:\nif image_path_server != \"\":\n    current_working_directory = os.getcwd()\n\n    local_file_path_list = mechanical.download(\n        image_path_server, target_dir=current_working_directory\n    )\n    image_local_path = local_file_path_list[0]\n    print(f\"Local image path : {image_local_path}\")\n\n    display_image(image_local_path)\n[21]:\nmechanical.run_python_script(f\"solve_dir=ExtAPI.DataModel.AnalysisList[3].WorkingDir\")\nresult_solve_dir_server = mechanical.run_python_script(f\"solve_dir\")\nprint(f\"All solver files are stored on the server at: {result_solve_dir_server}\")\n[22]:\nsolve_out_path = os.path.join(result_solve_dir_server, \"solve.out\")\n[23]:\ndef write_file_contents_to_console(path):\n    \"\"\"Write file contents to console.\"\"\"\n    with open(path, \"rt\") as file:\n        for line in file:\n            print(line, end=\"\")\n[24]:\ncurrent_working_directory = os.getcwd()\nmechanical.download(solve_out_path, target_dir=current_working_directory)\nsolve_out_local_path = os.path.join(current_working_directory, \"solve.out\")\nwrite_file_contents_to_console(solve_out_local_path)\nos.remove(solve_out_local_path)\n[25]:\nserver_port = wb.start_mechanical_server(system_name=sys_name[0])\nmechanical = launch_mechanical(start_instance=False, ip='localhost', port=server_port)\n[26]:\nprint(mechanical.project_directory)\n[27]:\nwith open(scripts / \"rotor_3d.py\") as sf:\n    mech_script = sf.read()\nmech_output = mechanical.run_python_script(mech_script)\nprint(mech_output)\n[28]:\nmechanical.run_python_script(f\"solve_dir=ExtAPI.DataModel.AnalysisList[2].WorkingDir\")\nresult_solve_dir_server = mechanical.run_python_script(f\"solve_dir\")\nprint(f\"All solver files are stored on the server at: {result_solve_dir_server}\")\n[29]:\nsolve_out_path = os.path.join(result_solve_dir_server, \"solve.out\")\n[30]:\ndef write_file_contents_to_console(path):\n    \"\"\"Write file contents to console.\"\"\"\n    with open(path, \"rt\") as file:\n        for line in file:\n            print(line, end=\"\")\n[31]:\ncurrent_working_directory = os.getcwd()\nmechanical.download(solve_out_path, target_dir=current_working_directory)\nsolve_out_local_path = os.path.join(current_working_directory, \"solve.out\")\nwrite_file_contents_to_console(solve_out_local_path)\nos.remove(solve_out_local_path)\n[32]:\nfrom matplotlib import image as mpimg\nfrom matplotlib import pyplot as plt\n[33]:\nmechanical.run_python_script(f\"image_dir=ExtAPI.DataModel.AnalysisList[2].WorkingDir\")\nresult_image_dir_server = mechanical.run_python_script(f\"image_dir\")\nprint(f\"Images are stored on the server at: {result_image_dir_server}\")\n[34]:\ndef get_image_path(image_name):\n    return os.path.join(result_image_dir_server, image_name)\n[35]:\ndef display_image(path):\n    print(f\"Printing {path} using matplotlib\")\n    image1 = mpimg.imread(path)\n    plt.figure(figsize=(15, 15))\n    plt.axis(\"off\")\n    plt.imshow(image1)\n    plt.show()\n[36]:\nimage_name = \"tot_deform_3D.png\"\nimage_path_server = get_image_path(image_name)\n[37]:\nif image_path_server != \"\":\n    current_working_directory = os.getcwd()\n\n    local_file_path_list = mechanical.download(\n        image_path_server, target_dir=current_working_directory\n    )\n    image_local_path = local_file_path_list[0]\n    print(f\"Local image path : {image_local_path}\")\n\n    display_image(image_local_path)\n[38]:\nmechanical.run_python_script(f\"solve_dir=ExtAPI.DataModel.AnalysisList[3].WorkingDir\")\nresult_solve_dir_server = mechanical.run_python_script(f\"solve_dir\")\nprint(f\"All solver files are stored on the server at: {result_solve_dir_server}\")\n[39]:\nsolve_out_path = os.path.join(result_solve_dir_server, \"solve.out\")\n[40]:\ndef write_file_contents_to_console(path):\n    \"\"\"Write file contents to console.\"\"\"\n    with open(path, \"rt\") as file:\n        for line in file:\n            print(line, end=\"\")\n[41]:\ncurrent_working_directory = os.getcwd()\nmechanical.download(solve_out_path, target_dir=current_working_directory)\nsolve_out_local_path = os.path.join(current_working_directory, \"solve.out\")\nwrite_file_contents_to_console(solve_out_local_path)\nos.remove(solve_out_local_path)\n[42]:\nimport shutil\nimport glob\n[43]:\ncurrent_working_directory = os.getcwd()\ntarget_dir2 = current_working_directory\nprint(f\"Files to be copied from server path at: {target_dir2}\")\nprint(f\"All the solver files are stored on the server at: {result_solve_dir_server}\")\n[44]:\nsource_dir = result_solve_dir_server\ndestination_dir = target_dir2\n[45]:\nfor file in glob.glob(source_dir + '/*'):\n    shutil.copy(file, destination_dir)\n[46]:\nmechanical.exit()\nwb.exit()"
    }
]